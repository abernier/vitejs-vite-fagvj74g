import * as THREE from 'three';

import { ComponentProps, useRef, useState } from 'react';
import { Canvas } from '@react-three/fiber';
import { useControls } from 'leva';
import {
  FaceLandmarker,
  PerspectiveCamera,
  Helper,
  CameraControls,
  useGLTF,
  Center,
  Resize,
} from '@react-three/drei';

import { FaceControls } from './tmp/FaceControls';
import { Raycaster } from './tmp/Raycaster';

export default function App() {
  return (
    <>
      <Canvas camera={{ position: [-1.5, 1, 2] }} shadows>
        <FaceLandmarker>
          <Scene />
        </FaceLandmarker>
      </Canvas>
    </>
  );
}

function Scene() {
  const gui = useControls({
    camera: { value: 'cc', options: ['user', 'cc'] },
  });
  const debug = gui.camera === 'cc';

  const [userCam, setUserCam] = useState<THREE.PerspectiveCamera | null>(null);

  const raycasterRef = useRef<THREE.Raycaster>(null);

  return (
    <>
      <color attach="background" args={['#403c3f']} />
      {/* {debug && <axesHelper />} */}
      {/* {debug && <gridHelper />} */}

      <Center top>
        <Resize width scale={2}>
          <Model
            rotation-z={(7 * Math.PI) / 180}
            rotation-x={(-1 * Math.PI) / 180}
          />
        </Resize>
      </Center>

      <Raycaster
        ref={raycasterRef}
        origin={[-4, 0, 0]}
        direction={[1, 0, 0]}
        near={1}
        far={8}
        helper={[20]}
      />

      <PerspectiveCamera
        ref={(cam) => setUserCam(cam)}
        makeDefault={gui.camera === 'user'}
        fov={40}
        near={0.1}
        far={5}
      >
        {debug && <Helper type={THREE.CameraHelper} />}
      </PerspectiveCamera>

      <FaceControls
        camera={userCam ?? undefined}
        makeDefault
        facemesh={{ position: [0, 0, 1.5] }}
        // smoothTime={0.2}
        // debug={debug}
      />
      <CameraControls />
    </>
  );
}

function Model(props: ComponentProps<'group'>) {
  /*
  Auto-generated by: https://github.com/pmndrs/gltfjsx
  Author: Omar Faruq Tawsif (https://sketchfab.com/omarfaruqtawsif32)
  License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
  Source: https://sketchfab.com/3d-models/painterly-brushwork-study-with-pchans-painting-e0166b7b9bff42e9a6b39ac1f08ce53c
  Title: Painterly brushwork study with Pchan's painting
  */

  const { nodes, materials } = useGLTF(
    'https://storage.googleapis.com/abernier-portfolio/painterly_brushwork_study_with_pchans_painting.glb'
  ) as any;

  return (
    <group {...props} dispose={null}>
      <group rotation={[-1.557, 0.116, -0.487]} scale={0.032}>
        <group rotation={[Math.PI / 2, 0, 0]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Object_4.geometry}
            material={materials['Material.001']}
            position={[0.265, 0.744, 0.211]}
            rotation={[2.033, -0.663, 2.801]}
          ></mesh>

          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Object_6.geometry}
            material={materials['Material.001']}
            position={[-0.374, -0.079, -0.609]}
            rotation={[2.097, -0.895, -1.122]}
            scale={0.829}
          ></mesh>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Object_8.geometry}
            material={materials['Material.001']}
            position={[0.602, -0.028, -0.553]}
            rotation={[-1.44, -0.68, 2.389]}
            scale={0.994}
          ></mesh>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Object_10.geometry}
            material={materials['Material.001']}
            position={[0.125, -0.204, -0.449]}
            scale={1.358}
          />
        </group>
      </group>
    </group>
  );
}
